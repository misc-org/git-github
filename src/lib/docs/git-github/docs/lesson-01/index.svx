---
title: Git / GitHub について
---

# { title }

Git はバージョン管理システムの一つで、GitHub は Git を利用したプロジェクトのホスティングサービスです。

おそらく、これを読む多くの方は、 Git といわれてもピンとこないと思いますので、まずは Git について簡単に説明します。

## Git とは

Git は、ファイルの変更履歴を記録してくれるバージョン管理ツールです。ファイルの変更履歴を記録しておくことで、過去の状態に戻したり、複数人での開発時に競合したお互いの変更を取り込んだりすることが容易になります。

Git は、ファイルの変更履歴を記録するための「リポジトリ」という単位で管理されます。私たちは、リポジトリに対して下記のような操作を行います。

| 操作 | 内容 |
| --- | --- |
| init | リポジトリを初期化する |
| clone | リポジトリを複製する |
| add | ファイルをステージングエリアに追加する |
| commit | ステージングエリアに追加されたファイルをリポジトリに記録する |
| push | ローカルリポジトリの変更をリモートリポジトリに反映する |
| pull | リモートリポジトリの変更をローカルリポジトリに反映する |
| branch | リポジトリの履歴を分岐させる |
| merge | リポジトリの履歴を統合する |
| rebase | リポジトリの履歴を整理する |
| tag | リポジトリの特定のコミットに名前をつける |
| log | リポジトリの履歴を表示する |

これらの操作を使いこなすことで、 Git を効率的に利用することができます。

ここまで読み終えた方々は、おそらく「専門用語」が多すぎると感じたことかと思います。用語集を別ページに作成しましたので、ホバーしたりクリックしたりして、用語の意味を確認してみてください。

### バージョン管理について

では、なぜバージョン管理を行う必要があるのでしょうか。一般的には、主に下の三つが挙げられます。

- プログラミングにおいて「以前に書いたコード」「コードの編集履歴」が重要であるから
- 同じプロジェクトを共同で同時に開発することができるから
- 本来のプログラミングは開かれた OSS であるべきだから

それぞ詳しく見ていきましょう。

---

- **プログラミングにおいて「以前に書いたコード」「コードの編集履歴」が重要であるから**

たとえば下記のようなコードがあったとします。

```
# めちゃくちゃすごくて天才的なコード
```

これを下記のように編集します。

```
# めちゃくちゃすごくて天才的だけどバグがあるコード
```

このとき、バグを修正して正常に動作するようにするのも一つの手ですが、場合によっては以前のコードに戻した方が良い時があります。

しかし、多くの場合戻るボタンではかぎりがありますし、たとえば一度エディタを閉じてしまうともう元には戻りません。

こうした時に、バージョン管理システムを使うと、正常に動作するコードであったタイミングまで元に戻すことができます。

---

- **同じプロジェクトを共同で同時に開発することができるから**

複数人でプロジェクトを開発する場合、同時であってもなくても、お互いの編集を自身のファイルに適応させなければいけません。

この時、たとえば自分の編集箇所を相手に伝える等、やり方はいくらでもありますが、ヒューマンエラーが起きるためあまりにも非合理的です。
また、同じ箇所を編集していた場合、どっちのコードをどうするか、その結果を相手にも反映させなければいけないなど不必要な工程が増えてしまいます。

Git などのバージョン管理システムであれば、お互いの編集が更新をかければ常に最新の状態になりますし、競合した編集も適切に修正することができます。

---

- **本来のプログラミングは開かれた OSS であるべきだから**

OSS とは、Open Source Software（オープンソースソフトウェア）の略で、ソースコードが公開されているソフトウェアのことを指します。

もちろん、技術的な関係で非公開にする場合もありますが、 VSCode や firefox など、オープンソースであることには理由があります。

ソースコードが公開されているということは、どのような仕組みでどこがどう動いているのかということがわかるということです。これは、ソフトウェアの透明性に繋がりますし、バグやエラーが起きればその原因を自分で探すことができます。
また、もしバグやエラーなどへの修正・改善を行えば、それを開発元に提出することで実際に適応してもらえることもあります。

Git / GitHub では、他者の作成したリポジトリを閲覧・編集することができます。
こうしたプログラマ同士でお互いに議論し合い、助け合い、高め合うことのできる点もまたバージョン管理システムを使うメリットの一つであると言えます。


## GitHub とは

さて、ここからはそんな Git のホスティングサービスである GitHub について説明していきましょう。

意味的な語弊は生まれますが、端的に説明するならば「 Git を GUI で使えるようにしたもの」が GitHub と言えるでしょう。

> CUI （ Character User Interface ） : CLI （ Command Line Interface ） と同義。コマンドなどで操作を行う UI のことを指す。
>
> GUI （ Graphical User Interface ） : 画面上にボタンやアイコンなどが表示されており、それを直接動かす・触ることで操作する UI のことを指す。

簡単に GitHub で行えることを見ていきましょう。

### オンラインでの共同開発

これは Git においても言えることではありますが、開発者同士がお互いの編集をリアルタイムに確認できたり、それらの統合・調整が可能になります。

コメントなどの機能もあるため、プロジェクトのコードにコメントをして相手へのフィードバックを行えたりします。

### プルリクエスト

GitHub には、プルリクエストという機能があります。その名の通り「 pull を リクエスト する」機能です。

具体的には、 OSS で開発されているプロジェクトに対して自分なりの修正・改善案を提出することで、実際に反映させることができます。

プロジェクト自体の管理者は作成者ですので、勝手にコードが変更されるわけでもなく、それでいて他のユーザーの意見を取り入れやすいというのが GitHub ならではの特徴です。

### GutHub Action による自動化

ソフトウェアを開発する際は、ほとんどの場合「ビルド」や「デプロイ」といった所謂パッケージング・公開のための作業が必要となります。

しかし、何度行おうと工程は同じであるため、 GitHub Action をつかうことでそれらの工程を自動で行うことができます。

また、プログラムに対してバグやエラーが発生しないかを確認するテストも行うことができます。

これらは、プルをした時など特定のタイミングで自動で実行されるので、時間の短縮にもなりますし、非常に効率的な機能となっています。

### Markdown によるドキュメント作成

GitHub では （でなくとも用意されている場合はあるが） 、各リポジトリに対して `README.md` というファイルが用意されていることが多いです。

読んで字の如く「これを読んでくださいね」というリポジトリの説明書のようなものです。

リポジトリにアクセスした段階ですぐに閲覧することができるので、ここにプロジェクトやソフトウェアの使用方法、謝辞といったことを書くことで、ユーザーもすぐに確認することができるのです。

---

こうした、開発者とそれを使用するユーザー、そして他の開発者のために最適化されたツールが、「 Git / GitHub 」なのです。

皆さんも、1人のエンジニア・プログラマとしてぜひ活用できるようになりましょう！