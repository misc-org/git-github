{"type":"data","nodes":[null,{"type":"data","data":[{"props":1},{"lesson":2,"id":3,"html":4,"title":8},"git-github","lesson-01",{"head":5,"html":6,"body":7},"","\u003C!--[-->\u003Ch1>Git / GitHub について\u003C/h1> \u003Cp>Git はバージョン管理システムの一つで、GitHub は Git を利用したプロジェクトのホスティングサービスです。\u003C/p> \u003Cp>おそらく、これを読む多くの方は、 Git といわれてもピンとこないと思いますので、まずは Git について簡単に説明します。\u003C/p> \u003Ch2>Git とは\u003C/h2> \u003Cp>Git は、ファイルの変更履歴を記録してくれるバージョン管理ツールです。ファイルの変更履歴を記録しておくことで、過去の状態に戻したり、複数人での開発時に競合したお互いの変更を取り込んだりすることが容易になります。\u003C/p> \u003Cp>Git は、ファイルの変更履歴を記録するための「リポジトリ」という単位で管理されます。私たちは、リポジトリに対して下記のような操作を行います。\u003C/p> \u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>操作\u003C/th>\u003Cth>内容\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>init\u003C/td>\u003Ctd>リポジトリを初期化する\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>clone\u003C/td>\u003Ctd>リポジトリを複製する\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>add\u003C/td>\u003Ctd>ファイルをステージングエリアに追加する\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>commit\u003C/td>\u003Ctd>ステージングエリアに追加されたファイルをリポジトリに記録する\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>push\u003C/td>\u003Ctd>ローカルリポジトリの変更をリモートリポジトリに反映する\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>pull\u003C/td>\u003Ctd>リモートリポジトリの変更をローカルリポジトリに反映する\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>branch\u003C/td>\u003Ctd>リポジトリの履歴を分岐させる\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>merge\u003C/td>\u003Ctd>リポジトリの履歴を統合する\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>rebase\u003C/td>\u003Ctd>リポジトリの履歴を整理する\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>tag\u003C/td>\u003Ctd>リポジトリの特定のコミットに名前をつける\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>log\u003C/td>\u003Ctd>リポジトリの履歴を表示する\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table> \u003Cp>これらの操作を使いこなすことで、 Git を効率的に利用することができます。\u003C/p> \u003Cp>ここまで読み終えた方々は、おそらく「専門用語」が多すぎると感じたことかと思います。用語集を別ページに作成しましたので、ホバーしたりクリックしたりして、用語の意味を確認してみてください。\u003C/p> \u003Ch3>バージョン管理について\u003C/h3> \u003Cp>では、なぜバージョン管理を行う必要があるのでしょうか。一般的には、主に下の三つが挙げられます。\u003C/p> \u003Cul>\u003Cli>プログラミングにおいて「以前に書いたコード」「コードの編集履歴」が重要であるから\u003C/li> \u003Cli>同じプロジェクトを共同で同時に開発することができるから\u003C/li> \u003Cli>本来のプログラミングは開かれた OSS であるべきだから\u003C/li>\u003C/ul> \u003Cp>それぞ詳しく見ていきましょう。\u003C/p> \u003Chr> \u003Cul>\u003Cli>\u003Cstrong>プログラミングにおいて「以前に書いたコード」「コードの編集履歴」が重要であるから\u003C/strong>\u003C/li>\u003C/ul> \u003Cp>たとえば下記のようなコードがあったとします。\u003C/p> \u003C!---->\u003Cpre class=\"shiki github-dark\" style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan># めちゃくちゃすごくて天才的なコード\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C!----> \u003Cp>これを下記のように編集します。\u003C/p> \u003C!---->\u003Cpre class=\"shiki github-dark\" style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan># めちゃくちゃすごくて天才的だけどバグがあるコード\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C!----> \u003Cp>このとき、バグを修正して正常に動作するようにするのも一つの手ですが、場合によっては以前のコードに戻した方が良い時があります。\u003C/p> \u003Cp>しかし、多くの場合戻るボタンではかぎりがありますし、たとえば一度エディタを閉じてしまうともう元には戻りません。\u003C/p> \u003Cp>こうした時に、バージョン管理システムを使うと、正常に動作するコードであったタイミングまで元に戻すことができます。\u003C/p> \u003Chr> \u003Cul>\u003Cli>\u003Cstrong>同じプロジェクトを共同で同時に開発することができるから\u003C/strong>\u003C/li>\u003C/ul> \u003Cp>複数人でプロジェクトを開発する場合、同時であってもなくても、お互いの編集を自身のファイルに適応させなければいけません。\u003C/p> \u003Cp>この時、たとえば自分の編集箇所を相手に伝える等、やり方はいくらでもありますが、ヒューマンエラーが起きるためあまりにも非合理的です。\nまた、同じ箇所を編集していた場合、どっちのコードをどうするか、その結果を相手にも反映させなければいけないなど不必要な工程が増えてしまいます。\u003C/p> \u003Cp>Git などのバージョン管理システムであれば、お互いの編集が更新をかければ常に最新の状態になりますし、競合した編集も適切に修正することができます。\u003C/p> \u003Chr> \u003Cul>\u003Cli>\u003Cstrong>本来のプログラミングは開かれた OSS であるべきだから\u003C/strong>\u003C/li>\u003C/ul> \u003Cp>OSS とは、Open Source Software（オープンソースソフトウェア）の略で、ソースコードが公開されているソフトウェアのことを指します。\u003C/p> \u003Cp>もちろん、技術的な関係で非公開にする場合もありますが、 VSCode や firefox など、オープンソースであることには理由があります。\u003C/p> \u003Cp>ソースコードが公開されているということは、どのような仕組みでどこがどう動いているのかということがわかるということです。これは、ソフトウェアの透明性に繋がりますし、バグやエラーが起きればその原因を自分で探すことができます。\nまた、もしバグやエラーなどへの修正・改善を行えば、それを開発元に提出することで実際に適応してもらえることもあります。\u003C/p> \u003Cp>Git / GitHub では、他者の作成したリポジトリを閲覧・編集することができます。\nこうしたプログラマ同士でお互いに議論し合い、助け合い、高め合うことのできる点もまたバージョン管理システムを使うメリットの一つであると言えます。\u003C/p> \u003Ch2>GitHub とは\u003C/h2> \u003Cp>さて、ここからはそんな Git のホスティングサービスである GitHub について説明していきましょう。\u003C/p> \u003Cp>意味的な語弊は生まれますが、端的に説明するならば「 Git を GUI で使えるようにしたもの」が GitHub と言えるでしょう。\u003C/p> \u003Cblockquote>\u003Cp>CUI （ Character User Interface ） : CLI （ Command Line Interface ） と同義。コマンドなどで操作を行う UI のことを指す。\u003C/p> \u003Cp>GUI （ Graphical User Interface ） : 画面上にボタンやアイコンなどが表示されており、それを直接動かす・触ることで操作する UI のことを指す。\u003C/p>\u003C/blockquote> \u003Cp>簡単に GitHub で行えることを見ていきましょう。\u003C/p> \u003Ch3>オンラインでの共同開発\u003C/h3> \u003Cp>これは Git においても言えることではありますが、開発者同士がお互いの編集をリアルタイムに確認できたり、それらの統合・調整が可能になります。\u003C/p> \u003Cp>コメントなどの機能もあるため、プロジェクトのコードにコメントをして相手へのフィードバックを行えたりします。\u003C/p> \u003Ch3>プルリクエスト\u003C/h3> \u003Cp>GitHub には、プルリクエストという機能があります。その名の通り「 pull を リクエスト する」機能です。\u003C/p> \u003Cp>具体的には、 OSS で開発されているプロジェクトに対して自分なりの修正・改善案を提出することで、実際に反映させることができます。\u003C/p> \u003Cp>プロジェクト自体の管理者は作成者ですので、勝手にコードが変更されるわけでもなく、それでいて他のユーザーの意見を取り入れやすいというのが GitHub ならではの特徴です。\u003C/p> \u003Ch3>GutHub Action による自動化\u003C/h3> \u003Cp>ソフトウェアを開発する際は、ほとんどの場合「ビルド」や「デプロイ」といった所謂パッケージング・公開のための作業が必要となります。\u003C/p> \u003Cp>しかし、何度行おうと工程は同じであるため、 GitHub Action をつかうことでそれらの工程を自動で行うことができます。\u003C/p> \u003Cp>また、プログラムに対してバグやエラーが発生しないかを確認するテストも行うことができます。\u003C/p> \u003Cp>これらは、プルをした時など特定のタイミングで自動で実行されるので、時間の短縮にもなりますし、非常に効率的な機能となっています。\u003C/p> \u003Ch3>Markdown によるドキュメント作成\u003C/h3> \u003Cp>GitHub では （でなくとも用意されている場合はあるが） 、各リポジトリに対して \u003Ccode>README.md\u003C/code> というファイルが用意されていることが多いです。\u003C/p> \u003Cp>読んで字の如く「これを読んでくださいね」というリポジトリの説明書のようなものです。\u003C/p> \u003Cp>リポジトリにアクセスした段階ですぐに閲覧することができるので、ここにプロジェクトやソフトウェアの使用方法、謝辞といったことを書くことで、ユーザーもすぐに確認することができるのです。\u003C/p> \u003Chr> \u003Cp>こうした、開発者とそれを使用するユーザー、そして他の開発者のために最適化されたツールが、「 Git / GitHub 」なのです。\u003C/p> \u003Cp>皆さんも、1人のエンジニア・プログラマとしてぜひ活用できるようになりましょう！\u003C/p>\u003C!--]-->","\u003C!--[-->\u003Chtml>\u003Chead>\u003C/head>\u003Cbody>\u003Ch1>Git / GitHub について\u003C/h1> \u003Cp>Git はバージョン管理システムの一つで、GitHub は Git を利用したプロジェクトのホスティングサービスです。\u003C/p> \u003Cp>おそらく、これを読む多くの方は、 Git といわれてもピンとこないと思いますので、まずは Git について簡単に説明します。\u003C/p> \u003Ch2>Git とは\u003C/h2> \u003Cp>Git は、ファイルの変更履歴を記録してくれるバージョン管理ツールです。ファイルの変更履歴を記録しておくことで、過去の状態に戻したり、複数人での開発時に競合したお互いの変更を取り込んだりすることが容易になります。\u003C/p> \u003Cp>Git は、ファイルの変更履歴を記録するための「\u003Ca href=\"/terms/git-github#リポジトリ\" class=\"term-link\" data-term-title=\"リポジトリ\" data-term-description=\"リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。\" onmouseenter=\"\n            requestAnimationFrame(() => {\n                this.dispatchEvent(new CustomEvent('termHover', {\n                    bubbles: true,\n                    detail: {\n                        title: 'リポジトリ',\n                        description: 'リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。',\n                        rect: this.getBoundingClientRect()\n                    }\n                }));\n            });\">リポジトリ\u003C/a>」という単位で管理されます。私たちは、\u003Ca href=\"/terms/git-github#リポジトリ\" class=\"term-link\" data-term-title=\"リポジトリ\" data-term-description=\"リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。\" onmouseenter=\"\n            requestAnimationFrame(() => {\n                this.dispatchEvent(new CustomEvent('termHover', {\n                    bubbles: true,\n                    detail: {\n                        title: 'リポジトリ',\n                        description: 'リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。',\n                        rect: this.getBoundingClientRect()\n                    }\n                }));\n            });\">リポジトリ\u003C/a>に対して下記のような操作を行います。\u003C/p> \u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>操作\u003C/th>\u003Cth>内容\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>init\u003C/td>\u003Ctd>\u003Ca href=\"/terms/git-github#リポジトリ\" class=\"term-link\" data-term-title=\"リポジトリ\" data-term-description=\"リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。\" onmouseenter=\"\n            requestAnimationFrame(() => {\n                this.dispatchEvent(new CustomEvent('termHover', {\n                    bubbles: true,\n                    detail: {\n                        title: 'リポジトリ',\n                        description: 'リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。',\n                        rect: this.getBoundingClientRect()\n                    }\n                }));\n            });\">リポジトリ\u003C/a>を初期化する\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>clone\u003C/td>\u003Ctd>\u003Ca href=\"/terms/git-github#リポジトリ\" class=\"term-link\" data-term-title=\"リポジトリ\" data-term-description=\"リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。\" onmouseenter=\"\n            requestAnimationFrame(() => {\n                this.dispatchEvent(new CustomEvent('termHover', {\n                    bubbles: true,\n                    detail: {\n                        title: 'リポジトリ',\n                        description: 'リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。',\n                        rect: this.getBoundingClientRect()\n                    }\n                }));\n            });\">リポジトリ\u003C/a>を複製する\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>add\u003C/td>\u003Ctd>ファイルをステージングエリアに追加する\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>commit\u003C/td>\u003Ctd>ステージングエリアに追加されたファイルを\u003Ca href=\"/terms/git-github#リポジトリ\" class=\"term-link\" data-term-title=\"リポジトリ\" data-term-description=\"リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。\" onmouseenter=\"\n            requestAnimationFrame(() => {\n                this.dispatchEvent(new CustomEvent('termHover', {\n                    bubbles: true,\n                    detail: {\n                        title: 'リポジトリ',\n                        description: 'リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。',\n                        rect: this.getBoundingClientRect()\n                    }\n                }));\n            });\">リポジトリ\u003C/a>に記録する\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>push\u003C/td>\u003Ctd>ローカル\u003Ca href=\"/terms/git-github#リポジトリ\" class=\"term-link\" data-term-title=\"リポジトリ\" data-term-description=\"リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。\" onmouseenter=\"\n            requestAnimationFrame(() => {\n                this.dispatchEvent(new CustomEvent('termHover', {\n                    bubbles: true,\n                    detail: {\n                        title: 'リポジトリ',\n                        description: 'リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。',\n                        rect: this.getBoundingClientRect()\n                    }\n                }));\n            });\">リポジトリ\u003C/a>の変更をリモート\u003Ca href=\"/terms/git-github#リポジトリ\" class=\"term-link\" data-term-title=\"リポジトリ\" data-term-description=\"リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。\" onmouseenter=\"\n            requestAnimationFrame(() => {\n                this.dispatchEvent(new CustomEvent('termHover', {\n                    bubbles: true,\n                    detail: {\n                        title: 'リポジトリ',\n                        description: 'リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。',\n                        rect: this.getBoundingClientRect()\n                    }\n                }));\n            });\">リポジトリ\u003C/a>に反映する\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>pull\u003C/td>\u003Ctd>リモート\u003Ca href=\"/terms/git-github#リポジトリ\" class=\"term-link\" data-term-title=\"リポジトリ\" data-term-description=\"リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。\" onmouseenter=\"\n            requestAnimationFrame(() => {\n                this.dispatchEvent(new CustomEvent('termHover', {\n                    bubbles: true,\n                    detail: {\n                        title: 'リポジトリ',\n                        description: 'リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。',\n                        rect: this.getBoundingClientRect()\n                    }\n                }));\n            });\">リポジトリ\u003C/a>の変更をローカル\u003Ca href=\"/terms/git-github#リポジトリ\" class=\"term-link\" data-term-title=\"リポジトリ\" data-term-description=\"リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。\" onmouseenter=\"\n            requestAnimationFrame(() => {\n                this.dispatchEvent(new CustomEvent('termHover', {\n                    bubbles: true,\n                    detail: {\n                        title: 'リポジトリ',\n                        description: 'リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。',\n                        rect: this.getBoundingClientRect()\n                    }\n                }));\n            });\">リポジトリ\u003C/a>に反映する\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>branch\u003C/td>\u003Ctd>\u003Ca href=\"/terms/git-github#リポジトリ\" class=\"term-link\" data-term-title=\"リポジトリ\" data-term-description=\"リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。\" onmouseenter=\"\n            requestAnimationFrame(() => {\n                this.dispatchEvent(new CustomEvent('termHover', {\n                    bubbles: true,\n                    detail: {\n                        title: 'リポジトリ',\n                        description: 'リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。',\n                        rect: this.getBoundingClientRect()\n                    }\n                }));\n            });\">リポジトリ\u003C/a>の履歴を分岐させる\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>merge\u003C/td>\u003Ctd>\u003Ca href=\"/terms/git-github#リポジトリ\" class=\"term-link\" data-term-title=\"リポジトリ\" data-term-description=\"リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。\" onmouseenter=\"\n            requestAnimationFrame(() => {\n                this.dispatchEvent(new CustomEvent('termHover', {\n                    bubbles: true,\n                    detail: {\n                        title: 'リポジトリ',\n                        description: 'リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。',\n                        rect: this.getBoundingClientRect()\n                    }\n                }));\n            });\">リポジトリ\u003C/a>の履歴を統合する\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>rebase\u003C/td>\u003Ctd>\u003Ca href=\"/terms/git-github#リポジトリ\" class=\"term-link\" data-term-title=\"リポジトリ\" data-term-description=\"リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。\" onmouseenter=\"\n            requestAnimationFrame(() => {\n                this.dispatchEvent(new CustomEvent('termHover', {\n                    bubbles: true,\n                    detail: {\n                        title: 'リポジトリ',\n                        description: 'リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。',\n                        rect: this.getBoundingClientRect()\n                    }\n                }));\n            });\">リポジトリ\u003C/a>の履歴を整理する\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>tag\u003C/td>\u003Ctd>\u003Ca href=\"/terms/git-github#リポジトリ\" class=\"term-link\" data-term-title=\"リポジトリ\" data-term-description=\"リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。\" onmouseenter=\"\n            requestAnimationFrame(() => {\n                this.dispatchEvent(new CustomEvent('termHover', {\n                    bubbles: true,\n                    detail: {\n                        title: 'リポジトリ',\n                        description: 'リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。',\n                        rect: this.getBoundingClientRect()\n                    }\n                }));\n            });\">リポジトリ\u003C/a>の特定の\u003Ca href=\"/terms/git-github#コミット\" class=\"term-link\" data-term-title=\"コミット\" data-term-description=\"コミットとは、リポジトリに変更を保存することです。\" onmouseenter=\"\n            requestAnimationFrame(() => {\n                this.dispatchEvent(new CustomEvent('termHover', {\n                    bubbles: true,\n                    detail: {\n                        title: 'コミット',\n                        description: 'コミットとは、リポジトリに変更を保存することです。',\n                        rect: this.getBoundingClientRect()\n                    }\n                }));\n            });\">コミット\u003C/a>に名前をつける\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>log\u003C/td>\u003Ctd>\u003Ca href=\"/terms/git-github#リポジトリ\" class=\"term-link\" data-term-title=\"リポジトリ\" data-term-description=\"リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。\" onmouseenter=\"\n            requestAnimationFrame(() => {\n                this.dispatchEvent(new CustomEvent('termHover', {\n                    bubbles: true,\n                    detail: {\n                        title: 'リポジトリ',\n                        description: 'リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。',\n                        rect: this.getBoundingClientRect()\n                    }\n                }));\n            });\">リポジトリ\u003C/a>の履歴を表示する\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table> \u003Cp>これらの操作を使いこなすことで、 Git を効率的に利用することができます。\u003C/p> \u003Cp>ここまで読み終えた方々は、おそらく「専門用語」が多すぎると感じたことかと思います。用語集を別ページに作成しましたので、ホバーしたりクリックしたりして、用語の意味を確認してみてください。\u003C/p> \u003Ch3>バージョン管理について\u003C/h3> \u003Cp>では、なぜバージョン管理を行う必要があるのでしょうか。一般的には、主に下の三つが挙げられます。\u003C/p> \u003Cul>\u003Cli>プログラミングにおいて「以前に書いたコード」「コードの編集履歴」が重要であるから\u003C/li> \u003Cli>同じプロジェクトを共同で同時に開発することができるから\u003C/li> \u003Cli>本来のプログラミングは開かれた OSS であるべきだから\u003C/li>\u003C/ul> \u003Cp>それぞ詳しく見ていきましょう。\u003C/p> \u003Chr> \u003Cul>\u003Cli>\u003Cstrong>プログラミングにおいて「以前に書いたコード」「コードの編集履歴」が重要であるから\u003C/strong>\u003C/li>\u003C/ul> \u003Cp>たとえば下記のようなコードがあったとします。\u003C/p> \u003C!---->\u003Cpre class=\"shiki github-dark\" style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan># めちゃくちゃすごくて天才的なコード\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C!----> \u003Cp>これを下記のように編集します。\u003C/p> \u003C!---->\u003Cpre class=\"shiki github-dark\" style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan># めちゃくちゃすごくて天才的だけどバグがあるコード\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C!----> \u003Cp>このとき、バグを修正して正常に動作するようにするのも一つの手ですが、場合によっては以前のコードに戻した方が良い時があります。\u003C/p> \u003Cp>しかし、多くの場合戻るボタンではかぎりがありますし、たとえば一度エディタを閉じてしまうともう元には戻りません。\u003C/p> \u003Cp>こうした時に、バージョン管理システムを使うと、正常に動作するコードであったタイミングまで元に戻すことができます。\u003C/p> \u003Chr> \u003Cul>\u003Cli>\u003Cstrong>同じプロジェクトを共同で同時に開発することができるから\u003C/strong>\u003C/li>\u003C/ul> \u003Cp>複数人でプロジェクトを開発する場合、同時であってもなくても、お互いの編集を自身のファイルに適応させなければいけません。\u003C/p> \u003Cp>この時、たとえば自分の編集箇所を相手に伝える等、やり方はいくらでもありますが、ヒューマンエラーが起きるためあまりにも非合理的です。\nまた、同じ箇所を編集していた場合、どっちのコードをどうするか、その結果を相手にも反映させなければいけないなど不必要な工程が増えてしまいます。\u003C/p> \u003Cp>Git などのバージョン管理システムであれば、お互いの編集が更新をかければ常に最新の状態になりますし、競合した編集も適切に修正することができます。\u003C/p> \u003Chr> \u003Cul>\u003Cli>\u003Cstrong>本来のプログラミングは開かれた OSS であるべきだから\u003C/strong>\u003C/li>\u003C/ul> \u003Cp>OSS とは、Open Source Software（オープンソースソフトウェア）の略で、ソースコードが公開されているソフトウェアのことを指します。\u003C/p> \u003Cp>もちろん、技術的な関係で非公開にする場合もありますが、 VSCode や firefox など、オープンソースであることには理由があります。\u003C/p> \u003Cp>ソースコードが公開されているということは、どのような仕組みでどこがどう動いているのかということがわかるということです。これは、ソフトウェアの透明性に繋がりますし、バグやエラーが起きればその原因を自分で探すことができます。\nまた、もしバグやエラーなどへの修正・改善を行えば、それを開発元に提出することで実際に適応してもらえることもあります。\u003C/p> \u003Cp>Git / GitHub では、他者の作成した\u003Ca href=\"/terms/git-github#リポジトリ\" class=\"term-link\" data-term-title=\"リポジトリ\" data-term-description=\"リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。\" onmouseenter=\"\n            requestAnimationFrame(() => {\n                this.dispatchEvent(new CustomEvent('termHover', {\n                    bubbles: true,\n                    detail: {\n                        title: 'リポジトリ',\n                        description: 'リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。',\n                        rect: this.getBoundingClientRect()\n                    }\n                }));\n            });\">リポジトリ\u003C/a>を閲覧・編集することができます。\nこうしたプログラマ同士でお互いに議論し合い、助け合い、高め合うことのできる点もまたバージョン管理システムを使うメリットの一つであると言えます。\u003C/p> \u003Ch2>GitHub とは\u003C/h2> \u003Cp>さて、ここからはそんな Git のホスティングサービスである GitHub について説明していきましょう。\u003C/p> \u003Cp>意味的な語弊は生まれますが、端的に説明するならば「 Git を GUI で使えるようにしたもの」が GitHub と言えるでしょう。\u003C/p> \u003Cblockquote>\u003Cp>CUI （ Character User Interface ） : CLI （ Command Line Interface ） と同義。コマンドなどで操作を行う UI のことを指す。\u003C/p> \u003Cp>GUI （ Graphical User Interface ） : 画面上にボタンやアイコンなどが表示されており、それを直接動かす・触ることで操作する UI のことを指す。\u003C/p>\u003C/blockquote> \u003Cp>簡単に GitHub で行えることを見ていきましょう。\u003C/p> \u003Ch3>オンラインでの共同開発\u003C/h3> \u003Cp>これは Git においても言えることではありますが、開発者同士がお互いの編集をリアルタイムに確認できたり、それらの統合・調整が可能になります。\u003C/p> \u003Cp>コメントなどの機能もあるため、プロジェクトのコードにコメントをして相手へのフィードバックを行えたりします。\u003C/p> \u003Ch3>プルリクエスト\u003C/h3> \u003Cp>GitHub には、\u003Ca href=\"/terms/git-github#プルリクエスト\" class=\"term-link\" data-term-title=\"プルリクエスト\" data-term-description=\"プルリクエストとは、変更をリポジトリに取り込むためのリクエストです。\" onmouseenter=\"\n            requestAnimationFrame(() => {\n                this.dispatchEvent(new CustomEvent('termHover', {\n                    bubbles: true,\n                    detail: {\n                        title: 'プルリクエスト',\n                        description: 'プルリクエストとは、変更をリポジトリに取り込むためのリクエストです。',\n                        rect: this.getBoundingClientRect()\n                    }\n                }));\n            });\">プルリクエスト\u003C/a>という機能があります。その名の通り「 pull を リクエスト する」機能です。\u003C/p> \u003Cp>具体的には、 OSS で開発されているプロジェクトに対して自分なりの修正・改善案を提出することで、実際に反映させることができます。\u003C/p> \u003Cp>プロジェクト自体の管理者は作成者ですので、勝手にコードが変更されるわけでもなく、それでいて他のユーザーの意見を取り入れやすいというのが GitHub ならではの特徴です。\u003C/p> \u003Ch3>GutHub Action による自動化\u003C/h3> \u003Cp>ソフトウェアを開発する際は、ほとんどの場合「ビルド」や「デプロイ」といった所謂パッケージング・公開のための作業が必要となります。\u003C/p> \u003Cp>しかし、何度行おうと工程は同じであるため、 GitHub Action をつかうことでそれらの工程を自動で行うことができます。\u003C/p> \u003Cp>また、プログラムに対してバグやエラーが発生しないかを確認するテストも行うことができます。\u003C/p> \u003Cp>これらは、プルをした時など特定のタイミングで自動で実行されるので、時間の短縮にもなりますし、非常に効率的な機能となっています。\u003C/p> \u003Ch3>Markdown によるドキュメント作成\u003C/h3> \u003Cp>GitHub では （でなくとも用意されている場合はあるが） 、各\u003Ca href=\"/terms/git-github#リポジトリ\" class=\"term-link\" data-term-title=\"リポジトリ\" data-term-description=\"リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。\" onmouseenter=\"\n            requestAnimationFrame(() => {\n                this.dispatchEvent(new CustomEvent('termHover', {\n                    bubbles: true,\n                    detail: {\n                        title: 'リポジトリ',\n                        description: 'リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。',\n                        rect: this.getBoundingClientRect()\n                    }\n                }));\n            });\">リポジトリ\u003C/a>に対して \u003Ccode>README.md\u003C/code> というファイルが用意されていることが多いです。\u003C/p> \u003Cp>読んで字の如く「これを読んでくださいね」という\u003Ca href=\"/terms/git-github#リポジトリ\" class=\"term-link\" data-term-title=\"リポジトリ\" data-term-description=\"リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。\" onmouseenter=\"\n            requestAnimationFrame(() => {\n                this.dispatchEvent(new CustomEvent('termHover', {\n                    bubbles: true,\n                    detail: {\n                        title: 'リポジトリ',\n                        description: 'リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。',\n                        rect: this.getBoundingClientRect()\n                    }\n                }));\n            });\">リポジトリ\u003C/a>の説明書のようなものです。\u003C/p> \u003Cp>\u003Ca href=\"/terms/git-github#リポジトリ\" class=\"term-link\" data-term-title=\"リポジトリ\" data-term-description=\"リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。\" onmouseenter=\"\n            requestAnimationFrame(() => {\n                this.dispatchEvent(new CustomEvent('termHover', {\n                    bubbles: true,\n                    detail: {\n                        title: 'リポジトリ',\n                        description: 'リポジトリとは、ソースコードやその他のファイルを保存する場所のことです。',\n                        rect: this.getBoundingClientRect()\n                    }\n                }));\n            });\">リポジトリ\u003C/a>にアクセスした段階ですぐに閲覧することができるので、ここにプロジェクトやソフトウェアの使用方法、謝辞といったことを書くことで、ユーザーもすぐに確認することができるのです。\u003C/p> \u003Chr> \u003Cp>こうした、開発者とそれを使用するユーザー、そして他の開発者のために最適化されたツールが、「 Git / GitHub 」なのです。\u003C/p> \u003Cp>皆さんも、1人のエンジニア・プログラマとしてぜひ活用できるようになりましょう！\u003C/p>\u003C!--]-->\u003C/body>\u003C/html>","Git / GitHub について"],"uses":{"params":["lesson","id"]}}]}
