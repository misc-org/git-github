import{a as l,t as n}from"./DCdiwAIr.js";import"./B2JXNoyN.js";import{a5 as s,d as e,a6 as h}from"./CIUJE9aE.js";import{h as d}from"./DiMggo7v.js";const i={title:"Git / GitHub について"},{title:u}=i;var c=n(`<h1></h1> <p>Git はバージョン管理システムの一つで、GitHub は Git を利用したプロジェクトのホスティングサービスです。</p> <p>おそらく、これを読む多くの方は、 Git といわれてもピンとこないと思いますので、まずは Git について簡単に説明します。</p> <h2>Git とは</h2> <p>Git は、ファイルの変更履歴を記録してくれるバージョン管理ツールです。ファイルの変更履歴を記録しておくことで、過去の状態に戻したり、複数人での開発時に競合したお互いの変更を取り込んだりすることが容易になります。</p> <p>Git は、ファイルの変更履歴を記録するための「リポジトリ」という単位で管理されます。私たちは、リポジトリに対して下記のような操作を行います。</p> <table><thead><tr><th>操作</th><th>内容</th></tr></thead><tbody><tr><td>init</td><td>リポジトリを初期化する</td></tr><tr><td>clone</td><td>リポジトリを複製する</td></tr><tr><td>add</td><td>ファイルをステージングエリアに追加する</td></tr><tr><td>commit</td><td>ステージングエリアに追加されたファイルをリポジトリに記録する</td></tr><tr><td>push</td><td>ローカルリポジトリの変更をリモートリポジトリに反映する</td></tr><tr><td>pull</td><td>リモートリポジトリの変更をローカルリポジトリに反映する</td></tr><tr><td>branch</td><td>リポジトリの履歴を分岐させる</td></tr><tr><td>merge</td><td>リポジトリの履歴を統合する</td></tr><tr><td>rebase</td><td>リポジトリの履歴を整理する</td></tr><tr><td>tag</td><td>リポジトリの特定のコミットに名前をつける</td></tr><tr><td>log</td><td>リポジトリの履歴を表示する</td></tr></tbody></table> <p>これらの操作を使いこなすことで、 Git を効率的に利用することができます。</p> <p>ここまで読み終えた方々は、おそらく「専門用語」が多すぎると感じたことかと思います。用語集を別ページに作成しましたので、ホバーしたりクリックしたりして、用語の意味を確認してみてください。</p> <h3>バージョン管理について</h3> <p>では、なぜバージョン管理を行う必要があるのでしょうか。一般的には、主に下の三つが挙げられます。</p> <ul><li>プログラミングにおいて「以前に書いたコード」「コードの編集履歴」が重要であるから</li> <li>同じプロジェクトを共同で同時に開発することができるから</li> <li>本来のプログラミングは開かれた OSS であるべきだから</li></ul> <p>それぞ詳しく見ていきましょう。</p> <hr> <ul><li><strong>プログラミングにおいて「以前に書いたコード」「コードの編集履歴」が重要であるから</strong></li></ul> <p>たとえば下記のようなコードがあったとします。</p> <!> <p>これを下記のように編集します。</p> <!> <p>このとき、バグを修正して正常に動作するようにするのも一つの手ですが、場合によっては以前のコードに戻した方が良い時があります。</p> <p>しかし、多くの場合戻るボタンではかぎりがありますし、たとえば一度エディタを閉じてしまうともう元には戻りません。</p> <p>こうした時に、バージョン管理システムを使うと、正常に動作するコードであったタイミングまで元に戻すことができます。</p> <hr> <ul><li><strong>同じプロジェクトを共同で同時に開発することができるから</strong></li></ul> <p>複数人でプロジェクトを開発する場合、同時であってもなくても、お互いの編集を自身のファイルに適応させなければいけません。</p> <p>この時、たとえば自分の編集箇所を相手に伝える等、やり方はいくらでもありますが、ヒューマンエラーが起きるためあまりにも非合理的です。
また、同じ箇所を編集していた場合、どっちのコードをどうするか、その結果を相手にも反映させなければいけないなど不必要な工程が増えてしまいます。</p> <p>Git などのバージョン管理システムであれば、お互いの編集が更新をかければ常に最新の状態になりますし、競合した編集も適切に修正することができます。</p> <hr> <ul><li><strong>本来のプログラミングは開かれた OSS であるべきだから</strong></li></ul> <p>OSS とは、Open Source Software（オープンソースソフトウェア）の略で、ソースコードが公開されているソフトウェアのことを指します。</p> <p>もちろん、技術的な関係で非公開にする場合もありますが、 VSCode や firefox など、オープンソースであることには理由があります。</p> <p>ソースコードが公開されているということは、どのような仕組みでどこがどう動いているのかということがわかるということです。これは、ソフトウェアの透明性に繋がりますし、バグやエラーが起きればその原因を自分で探すことができます。
また、もしバグやエラーなどへの修正・改善を行えば、それを開発元に提出することで実際に適応してもらえることもあります。</p> <p>Git / GitHub では、他者の作成したリポジトリを閲覧・編集することができます。
こうしたプログラマ同士でお互いに議論し合い、助け合い、高め合うことのできる点もまたバージョン管理システムを使うメリットの一つであると言えます。</p> <h2>GitHub とは</h2> <p>さて、ここからはそんな Git のホスティングサービスである GitHub について説明していきましょう。</p> <p>意味的な語弊は生まれますが、端的に説明するならば「 Git を GUI で使えるようにしたもの」が GitHub と言えるでしょう。</p> <blockquote><p>CUI （ Character User Interface ） : CLI （ Command Line Interface ） と同義。コマンドなどで操作を行う UI のことを指す。</p> <p>GUI （ Graphical User Interface ） : 画面上にボタンやアイコンなどが表示されており、それを直接動かす・触ることで操作する UI のことを指す。</p></blockquote> <p>簡単に GitHub で行えることを見ていきましょう。</p> <h3>オンラインでの共同開発</h3> <p>これは Git においても言えることではありますが、開発者同士がお互いの編集をリアルタイムに確認できたり、それらの統合・調整が可能になります。</p> <p>コメントなどの機能もあるため、プロジェクトのコードにコメントをして相手へのフィードバックを行えたりします。</p> <h3>プルリクエスト</h3> <p>GitHub には、プルリクエストという機能があります。その名の通り「 pull を リクエスト する」機能です。</p> <p>具体的には、 OSS で開発されているプロジェクトに対して自分なりの修正・改善案を提出することで、実際に反映させることができます。</p> <p>プロジェクト自体の管理者は作成者ですので、勝手にコードが変更されるわけでもなく、それでいて他のユーザーの意見を取り入れやすいというのが GitHub ならではの特徴です。</p> <h3>GutHub Action による自動化</h3> <p>ソフトウェアを開発する際は、ほとんどの場合「ビルド」や「デプロイ」といった所謂パッケージング・公開のための作業が必要となります。</p> <p>しかし、何度行おうと工程は同じであるため、 GitHub Action をつかうことでそれらの工程を自動で行うことができます。</p> <p>また、プログラムに対してバグやエラーが発生しないかを確認するテストも行うことができます。</p> <p>これらは、プルをした時など特定のタイミングで自動で実行されるので、時間の短縮にもなりますし、非常に効率的な機能となっています。</p> <h3>Markdown によるドキュメント作成</h3> <p>GitHub では （でなくとも用意されている場合はあるが） 、各リポジトリに対して <code>README.md</code> というファイルが用意されていることが多いです。</p> <p>読んで字の如く「これを読んでくださいね」というリポジトリの説明書のようなものです。</p> <p>リポジトリにアクセスした段階ですぐに閲覧することができるので、ここにプロジェクトやソフトウェアの使用方法、謝辞といったことを書くことで、ユーザーもすぐに確認することができるのです。</p> <hr> <p>こうした、開発者とそれを使用するユーザー、そして他の開発者のために最適化されたツールが、「 Git / GitHub 」なのです。</p> <p>皆さんも、1人のエンジニア・プログラマとしてぜひ活用できるようになりましょう！</p>`,1);function b(a){var t=c(),p=s(t);p.textContent=u;var r=e(p,32);d(r,()=>'<pre class="shiki github-dark" style="background-color:#24292e;color:#e1e4e8" tabindex="0"><code><span class="line"><span># めちゃくちゃすごくて天才的なコード</span></span></code></pre>',!1,!1);var o=e(r,4);d(o,()=>'<pre class="shiki github-dark" style="background-color:#24292e;color:#e1e4e8" tabindex="0"><code><span class="line"><span># めちゃくちゃすごくて天才的だけどバグがあるコード</span></span></code></pre>',!1,!1),h(76),l(a,t)}const H=Object.freeze(Object.defineProperty({__proto__:null,default:b,metadata:i},Symbol.toStringTag,{value:"Module"}));export{H as _};
